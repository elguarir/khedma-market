// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String  @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum role {
    user
    admin
}

enum SkillStatus {
    active
    inactive
}

model Language {
    id        String   @id @default(cuid())
    name      String
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")
    User      User[]

    @@map("languages")
}

model Education {
    id               String   @id @default(cuid())
    country          String
    universityName   String   @map("university_name")
    title            String
    major            String
    yearOfGraduation DateTime @map("year_of_graduation")

    User   User?   @relation(fields: [userId], references: [id])
    userId String? @map("user_id")

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    @@map("education")
}

model Certification {
    id            String   @id @default(cuid())
    name          String
    certifiedFrom String   @map("certified_from")
    createdAt     DateTime @default(now()) @map("created_at")
    updatedAt     DateTime @updatedAt @map("updated_at")
    User          User?    @relation(fields: [userId], references: [id])
    userId        String?  @map("user_id")

    @@map("certifications")
}

model Skill {
    id     String      @id @default(cuid())
    name   String
    status SkillStatus @default(inactive)

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")
    User      User?    @relation(fields: [userId], references: [id])
    userId    String?  @map("user_id")

    @@map("skills")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    username      String?   @unique
    email         String?   @unique
    emailVerified DateTime? @map("email_verified")
    image         String?
    description   String?
    password      String?   @db.Text
    role          role      @default(user)
    from          String?
    createdAt     DateTime  @default(now()) @map("created_at")
    updatedAt     DateTime  @updatedAt @map("updated_at")

    languages      Language[]
    skills         Skill[]
    education      Education[]
    accounts       Account[]
    sessions       Session[]
    certifications Certification[]
    messages       Message[]
    attachements   Attachement[]
    conversations  Conversation[]  @relation("UserConversation")
    Gig            Gig[]

    @@map("users")
}

model Message {
    id             String        @id @default(cuid())
    content        String        @db.Text
    conversationId String        @map("conversation_id")
    User           User?         @relation(fields: [userId], references: [id])
    userId         String?       @map("user_id")
    createdAt      DateTime      @default(now()) @map("created_at")
    updatedAt      DateTime      @updatedAt @map("updated_at")
    attachements   Attachement[]
    Conversation   Conversation  @relation(fields: [conversationId], references: [id])

    @@map("messages")
}

model Conversation {
    id         String    @id @default(cuid())
    createdAt  DateTime  @default(now()) @map("created_at")
    updatedAt  DateTime  @updatedAt @map("updated_at")
    senderId   String    @map("sender_id")
    receiverId String    @map("receiver_id")
    users      User[]    @relation("UserConversation")
    Message    Message[]

    @@map("conversations")
}

model Attachement {
    id        String   @id @default(cuid())
    name      String
    url       String
    type      String
    userId    String?  @map("user_id")
    User      User?    @relation(fields: [userId], references: [id])
    messageId String?  @map("message_id")
    Message   Message? @relation(fields: [messageId], references: [id])
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")
    Gig       Gig?     @relation(fields: [gigId], references: [id])
    gigId     String?

    @@map("attachements")
}

model Gig {
    id          String   @id @default(cuid())
    title       String
    description Json
    userId      String?  @map("user_id")
    categoryId  String?  @map("category_id")
    createdAt   DateTime @default(now()) @map("created_at")
    updatedAt   DateTime @updatedAt @map("updated_at")

    packages    Package[]
    category    Category?     @relation(fields: [categoryId], references: [id])
    user        User?         @relation(fields: [userId], references: [id])
    attachments Attachement[]

    @@map("gigs")
}

model Package {
    id          String   @id @default(cuid())
    price       Float
    delivery    Int
    description String
    revision    Int
    createdAt   DateTime @default(now()) @map("created_at")
    updatedAt   DateTime @updatedAt @map("updated_at")

    gig   Gig?    @relation(fields: [gigId], references: [id])
    gigId String? @map("gig_id")
}

model Category {
    id             String     @id @default(cuid())
    name           String
    slug           String     @unique
    parentCategory Category?  @relation(name: "CategoryRelation", fields: [parentId], references: [id])
    subCategories  Category[] @relation(name: "CategoryRelation")
    parentId       String?    @map("parent_id")
    Gig            Gig[]

    @@map("categories")
}
